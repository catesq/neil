#encoding: latin-1

# Lunar
# dsp scripting host for zzub
# Copyright (C) 2006 The Aldrin Development Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Import('env','install','liblunarpath')
import glob, os

#######################################
#
# lunar scripts
#
#######################################

# this code basically just scans subdirectories for manifest files
# and does the installation based on the information provided
# if module compile instructions are found, they are being executed

dir_path = ""

env['LUNAR_INCLUDE'] = env.Dir("./../include")

def build_fxheader(target, source, env):
	defpath = str(target[0])
	ofile = file(defpath,'w')
	p = env['PLUGIN']
	params = p.getElementsByTagName('parameters')[0]
	g = p.getElementsByTagName('global')
	if g: g = g[0]
	t = p.getElementsByTagName('track')
	if t: t = t[0]
	print >> ofile, "#if !defined(LUNAR_PLUGIN_LOCALS_H)"
	print >> ofile, '#define LUNAR_PLUGIN_LOCALS_H'
	print >> ofile, '#define LUNAR_USE_LOCALS'
	
	print >> ofile, "#if defined(__cplusplus)"
	print >> ofile, 'extern "C" {'
	print >> ofile, "#endif // __cplusplus"
	
	params = g.getElementsByTagName('parameter')
	print >> ofile, "typedef struct _lunar_globals {"
	for param in params:
		print >> ofile, "\tfloat *%s;" % param.getAttribute("id")
	print >> ofile, "} lunar_globals_t;"
	print >> ofile, "typedef struct _lunar_global_values {"
	for param in params:
		print >> ofile, "\tfloat %s;" % param.getAttribute("id")
	print >> ofile, "} lunar_global_values_t;"

	params = t.getElementsByTagName('parameter')
	print >> ofile, "typedef struct _lunar_track {"
	for param in params:
		print >> ofile, "\tfloat *%s;" % param.getAttribute("id")
	print >> ofile, "} lunar_track_t;"
	print >> ofile, "typedef struct _lunar_track_values {"
	for param in params:
		print >> ofile, "\tfloat %s;" % param.getAttribute("id")
	print >> ofile, "} lunar_track_values_t;"

	print >> ofile, "#if defined(__cplusplus)"
	print >> ofile, '}'
	print >> ofile, "#endif // __cplusplus"
	print >> ofile, "#endif // LUNAR_PLUGIN_LOCALS_H"

def new_modenv():
	if env['LUNARTARGET'] == 'llvm':
		modenv = Environment()
		modenv['CPPPATH'] = [
			env.Dir('${LUNAR_INCLUDE}'),
		]
		modenv['CC'] = modenv['CXX'] = env.File('${LLVMGCCPATH}/llvm-gcc')
		modenv['CCFLAGS'] = [
			'-emit-llvm',
			'-fno-builtin',
			'-nostdinc',
			'-nodefaultlibs',
			'-nostdlib',
			'-O3',
			'-fomit-frame-pointer',
			#~ '-c'
		]
	elif env['LUNARTARGET'] == 'gcc':
		modenv = env.Copy()
		modenv['CPPPATH'] = [
			env.Dir('${LUNAR_INCLUDE}'),
		]
		modenv['SHLIBPREFIX'] = ''
		modenv.Append(CCFLAGS=[
			'-fno-builtin',
			'-nostdinc',
			'-nodefaultlibs',
			'-nostdlib',
		])
		modenv.Append(LIBS=[
			'lunarstd'
		])
	return modenv

env['BUILDERS']['LunarFXHeader'] = Builder(action = build_fxheader)

env['LUNAR_TARGET_PATH'] = '${DESTDIR}${PREFIX}${LIBDIR}/lunar/fx'

from xml.dom.minidom import parse
basepath = str(env.Dir('.'))
for name in os.listdir(basepath):
	fullpath = os.path.join(basepath,name)
	if os.path.isdir(fullpath):
		manifestpath = os.path.join(fullpath,'manifest.xml')
		if os.path.isfile(manifestpath):
			install('${LUNAR_TARGET_PATH}/'+name, manifestpath)
			root = parse(manifestpath).documentElement
			assert root.tagName == 'zzub', "Invalid root node name."
			plugins = root.getElementsByTagName('plugin')
			for plugin in plugins:
				modules = plugin.getElementsByTagName('modules')
				if modules:
					modules = modules[0]
					for m in modules.getElementsByTagName('module'):
						mpath = os.path.join(fullpath,str(m.getAttribute("id")))
						modenv = new_modenv()
						if env['LUNARTARGET'] == 'llvm':
							mpath += '.bc'
							for s in m.getElementsByTagName('source'):
								slang = s.getAttribute("language")
								spath = os.path.join(fullpath,str(s.getAttribute("ref")))
								if slang in ("c", "c++"):
									if s.getAttribute("fxdef"):
										defpath = os.path.join(fullpath,str(s.getAttribute("fxdef")))
										defenv = env.Copy()
										defenv['PLUGIN'] = plugin
										defenv.LunarFXHeader(target=defpath, source=manifestpath)
									modenv.Object(target=mpath, source=spath)
							install('${LUNAR_TARGET_PATH}/'+name, mpath)
						elif env['LUNARTARGET'] == 'gcc':
							mpath += modenv['SHLIBSUFFIX']
							sources = []
							for s in m.getElementsByTagName('source'):
								slang = s.getAttribute("language")
								spath = os.path.join(fullpath,str(s.getAttribute("ref")))
								if slang in ("c", "c++"):
									if s.getAttribute("fxdef"):
										defpath = os.path.join(fullpath,str(s.getAttribute("fxdef")))
										defenv = env.Copy()
										defenv['PLUGIN'] = plugin
										defenv.LunarFXHeader(target=defpath, source=manifestpath)
										sources.append(spath)
							modenv.SharedLibrary(target=mpath, source=sources)
							install('${LUNAR_TARGET_PATH}/'+name, mpath)
				files = plugin.getElementsByTagName('files')[0]
				for f in files.getElementsByTagName('file'):
					fname = f.getAttribute('ref')
					filepath = os.path.join(fullpath,fname)
					install('${LUNAR_TARGET_PATH}/'+name, filepath)
