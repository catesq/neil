#encoding: latin-1

# libzzub, Buzé, Aldrin
# Modular Sequencer
# Copyright (C) 2006 The Aldrin Development Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Import('env', 'posix', 'install_lib', 'install')
import glob

#######################################
#
# libzzub shared library
#
#######################################

localenv = env.Clone()

files = [
	'bmxreader.cpp',
	'bmxwriter.cpp',
	'compress.cpp',
	'decompress.cpp',
	'dummy.cpp',
	'host.cpp',
	'libzzub.cpp',
	'driver.cpp',
	'master.cpp',
	'player.cpp',
	'pluginloader.cpp',
	'tools.cpp',
	'wavetable.cpp',
	'midi.cpp',
	'recorder.cpp',
	'ccm.cpp',
	'connections.cpp',
	'input.cpp',
	'operations.cpp',
	'output.cpp',
	'song.cpp',
	'synchronization.cpp',
	'undo.cpp',
	'pugixml.cpp',
	'thread_id.cpp',
]

# minizip and zlib dependencies
files += [
	'${MINIZIP_SRC_PATH}/ioapi.c',
	'${MINIZIP_SRC_PATH}/mztools.c',
	'${MINIZIP_SRC_PATH}/unzip.c',
	'${MINIZIP_SRC_PATH}/zip.c',
]

localenv.Append(LIBS=[
	'FLAC',
	'z',
])

localenv.Append(CCFLAGS=['-D_LIB','-D_LIBZZUB'])

# neccessities
if posix:	
    localenv.Append(CCFLAGS=[
	    '-Wno-deprecated',
    ])
    localenv.Append(LIBS=[
	    'pthread',
	    localenv['LIB_DL'],
	    localenv['LIB_COMPAT'],
    ])

if localenv['USE_SIGNATURE'] == True:
    localenv.Append(CCFLAGS=[
	    '-DUSE_SIGNATURE'
    ])


if localenv['SNDFILE']:
    localenv.Append(LIBS=[
	    'sndfile',
    ])
    localenv.Append(CCFLAGS=[
	    '-DUSE_SNDFILE',
    ])

# portmidi support
localenv.Append(CPPPATH=[
	'${PORTMIDI_SRC_PATH}/pm_common',
	'${PORTMIDI_SRC_PATH}/porttime'
])

if posix:
    # porttime and portmidi
    files += [
		    '${PORTMIDI_SRC_PATH}/porttime/porttime.c',
		    '${PORTMIDI_SRC_PATH}/pm_common/pmutil.c',
		    '${PORTMIDI_SRC_PATH}/pm_common/portmidi.c',
    ]

    files += [
        '${PORTMIDI_SRC_PATH}/porttime/ptlinux.c',
        '${PORTMIDI_SRC_PATH}/pm_linux/pmlinux.c',
	]
    localenv.Append(CCFLAGS=[
            '-DPM_CHECK_ERRORS',
            '-DNEWBUFFER'
            ])
    if localenv["ALSA"] == True:
        files += [ '${PORTMIDI_SRC_PATH}/pm_linux/pmlinuxalsa.c' ]
        localenv.Append(LIBS=[ 'asound', ])
        localenv.Append(CCFLAGS=[ '-DPMALSA', ])


#######################################
# rtaudio
#######################################

if localenv['AUDIOENGINE'] == 'rtaudio':
    files += [
	    'driver_rtaudio.cpp',
    ]

    localenv.Append(CCFLAGS=[
	    '-DUSE_RTAUDIO',
    ])

    localenv.SConscript('../rtaudio/SConscript')
    localenv.Append(LIBS=[
	    'rtaudio_static',
    ])
    localenv.Append(CPPPATH=[
	    '../rtaudio',
    ])
    if localenv['ALSA'] == True:
	localenv.Append(CCFLAGS=['-D__LINUX_ALSA__'])
	localenv.Append(LIBS=['asound'])
    if localenv['JACK'] == True:
	localenv.Append(CCFLAGS=['-D__UNIX_JACK__'])
	localenv.Append(LIBS=[ 'jack', localenv['LIB_RT'] ])
    if localenv['OSS'] == True:
	localenv.Append(CCFLAGS=['-D__LINUX_OSS__'])

    if posix:
	localenv.Append(LIBS=[
		'pthread',
		'm',
	])

#######################################
# targets
#######################################

shlibsuffix = localenv['SHLIBSUFFIX']

if posix:
    localenv['SHLIBSUFFIX'] += '.' + env['LIBZZUB_VERSION']
libzzub = localenv.SharedLibrary('${LIB_BUILD_PATH}/zzub',files)
installed_libzzub = install_lib(libzzub)
if posix:
    vcomps = env['LIBZZUB_VERSION'].split('.')
    for i in range(len(vcomps)):
	v = '.'.join(vcomps[:i])
	if v:
	    v = '.'+v
	symlinkcmd = 'cd $TARGET.dir && rm -f $TARGET.name && ln -s $SOURCE.name $TARGET.name'
	localenv.Command('${LIB_BUILD_PATH}/libzzub'+shlibsuffix+v, libzzub, symlinkcmd)
	localenv.Command('${DESTDIR}${PREFIX}${LIBDIR}/libzzub'+shlibsuffix+v, installed_libzzub, symlinkcmd)
