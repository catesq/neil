#type: ignore
# libzzub
# Modular Tracker Library
# Copyright (C) 2006 The libzzub Development Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA    02110-1301, USA.

VERSION = "0.3"

import os, sys, platform
import ext_modules
from distutils.version import LooseVersion

posix = os.name == 'posix'
linux = sys.platform == 'linux'
x86_64 = platform.machine() == 'x86_64'

Import('main_env', 'tools_converter', 'bool_converter', 'install_recursive')



##############################################
#
# important install paths
#
#############################################

rootpath = "${DESTDIR}${PREFIX}"
binpath = "${DESTDIR}${PREFIX}/bin"
libpath = "${DESTDIR}${PREFIX}${LIBDIR}"
includepath = "${DESTDIR}${PREFIX}/include"
pluginpath = "${DESTDIR}${PREFIX}${LIBDIR}/zzub"

pyextpath = main_env['SITE_PACKAGE_PATH']



##############################################
#
# error types used by the configuration check
#
##############################################

class LibraryNotFound:
    def __init__(self, lib):
        self.lib = lib
    def __str__(self):
        return "error: unable to find dev headers for '%s'" % self.lib

class ExecNotFound:
    def __init__(self, prog, extra_msg = None):
        self.prog = prog
        self.extra_msg = extra_msg
    def __str__(self):
        if self.extra_msg:
            return "error: unable to find executable file for '%s': %s" % (self.prog, self.extra_msg)
        else:
            return "error: unable to find executable file for '%s'" % self.prog

class SubModuleNotFound:
    def __init__(self, name, url):
        self.name = name
        self.url = url
    def __str__(self):
        return "error: missing git submodule for %s (%s). try 'git submodule --init --update' in the root dir" % (self.name, self.url)

class PkgVersionErr:
    def __init__(self, lib, version):
        self.lib = lib
        self.version = version
    def __str__(self):
        return "error: '%s' version needs to be > %s" % (self.lib, self.version)


class LlvmConfigError:
    def __init__(self, err):
        self.err = err
    def __str__(self):
        return "llvm-config error: " + self.err + "\n\nInstall llvm or rocm-llvm with static llvm libraries and add LLVM_CONFIG=<new llvm-config> to scons configure"

######################################
#
# submodule helpers
#
######################################

def add_submodule(env, submodule):
    if submodule.get_src_path():
        env.Append(CPPPATH = [submodule.get_src_path()])
        if submodule.get_src_path_key():
            env[submodule.get_src_path_key()] = submodule.get_src_path()

    if submodule.get_cpp_defines():
        env.Append(CPPDEFINES = submodule.get_cpp_defines())

    for key, val in submodule.get_env_flags().items():
        env[key] = val

    if 'submodules' not in env:
        env['submodules'] = []

    env['submodules'].append(submodule)


def add_submodules(env, submodules):
    # def __init__(self, submodules, env):
    for module in submodules:
        env.AddSubmodule(module)


def build_submodules(env):
    if 'submodules' not in env:
        return
    
    for module in env['submodules']:
        module.build(env)


def install_submodules(env):
    for module in env['submodules']:
        module.install(env)



######################################
#
# init environment and define options
#
######################################

def audioengine_converter(value):
    value = value.lower()
    if not value in ('portaudio'):
        print("invalid option for AUDIOENGINE:",value)
        sys.exit(1)
    return value


options_conf_file = os.path.join(main_env['BUILD_PATH'], 'options.conf')

opts = Variables( options_conf_file, ARGUMENTS )
opts.Add("PREFIX", 'Set the install "prefix" ( /path/to/PREFIX )', "/usr/local")
opts.Add("LIBDIR", 'Set the install "libdir", will be concatenated to PREFIX', "/lib")
opts.Add("DESTDIR", 'Set the root directory to install into ( /path/to/DESTDIR )', "")
opts.Add("USE_SIGNATURE", 'Use signature to bond plugins and host (strongly recommended)', True, None, bool_converter)
opts.Add("SNDFILE", 'Support loading of waves via libsndfile', True, None, bool_converter)
opts.Add("DEBUG", "Compile everything in debug mode if true", False, None, bool_converter)
opts.Add("ZZUB_MODULE", "Compile module loading plugin (experimental)", False, None, bool_converter)
opts.Add("ZZUB_STREAM", "Compile stream plugins", True, None, bool_converter)
opts.Add("REVISION", 'Revision number (will be set automatically), default=0', '')
opts.Add("SIGNATURE", 'Host signature (will be set automatically)', '')
opts.Add("CONFIGURED", 'Version for which the build is configured (will be set automatically)', '')
opts.Add("TOOLS", 'Compiler suite to use', 'default', None, tools_converter)
# opts.Add("LLVMGCCPATH", 'Path to llvm-gcc', '')
opts.Add("LLVM_CONFIG", 'Path to llvm-config', 'llvm-config')

opts.Add("SSE", "Support SSE instructions", False, None, bool_converter)
opts.Add("SSE2", "Support SSE2 instructions", False, None, bool_converter)
opts.Add("LADSPA", "Support LADSPA plugins", False, None, bool_converter)
opts.Add("DSSI", "Support DSSI plugins", False, None, bool_converter)
opts.Add("LV2", "Support LV2 plugins", False, None, bool_converter)
opts.Add("JOBS", "Number of threads to compile with", '2')
opts.Add("PYZZUB", "Support pyzzub", True, None, bool_converter)
opts.Add("GTK3", "Support GTK3 GUIs", False, None, bool_converter)
opts.Add("MAD", "Support libmad encoder", False, None, bool_converter)

env = Environment(ENV = os.environ, options = opts)

# syntax sugar to allow env.AddSubmodule() etc
env.AddMethod(add_submodule, "AddSubmodule")
env.AddMethod(add_submodules, "AddSubmodules")
env.AddMethod(build_submodules, "BuildSubmodules")

def get_revision():
    # its a release build, take the string from a special file
    if os.path.isfile('REVISION'):
        rev = open('REVISION').readline().strip()
        if rev != "" and rev != "exported":
            return rev
    return env['REVISION']

revision = get_revision()
print(revision, file=open('REVISION','w'))
env['REVISION'] = revision

env.SConsignFile()




######################################
#
# build settings
#
######################################

env['SRC_PATH'] = main_env['SRC_PATH']
env['BUILD_PATH'] = main_env['BUILD_PATH']
env['INSTALL_ROOT'] = "${DESTDIR}${PREFIX}"


env.Append(CCFLAGS=['-D__SCONS__'])
env.Append(LIBPATH=['${BUILD_PATH}/lib'])

SetOption('num_jobs', env['JOBS'].replace('-j', ''))

env.Append(CCFLAGS=[ '-DPOSIX', ])
env.Append(LINKFLAGS=[ '-Wl,-rpath=%s' % str(env.Dir('${DESTDIR}${PREFIX}${LIBDIR}')), ])

if os.uname()[0] == 'FreeBSD':
    env.Append(CCFLAGS=[ '-I/usr/local/include' ])
    env.Append(LINKFLAGS=[ '-L/usr/local/lib' ])
    env['LIB_DL'] = env['LIB_RT'] = ''
    env['LIB_COMPAT'] = 'compat'
else:
    env['LIB_DL'] = 'dl'
    env['LIB_RT'] = 'rt'
    env['LIB_COMPAT'] = ''

#if env['COMPILER'] == 'clang':
    #env['CC'] += 'clang'
    #env['CXX'] += 'clang++'
    #gcc = False
    #clang = True
#else:
    #env['CC'] += 'gcc'
    #env['CXX'] += 'g++'
    #gcc = True
    #clang = False

# env['CC'] = ' clang'
# env['CXX'] = ' clang++'
gcc = True

if gcc:
    #env['CXXFLAGS'] += ['--no-rtti']
    env['CXXFLAGS'] += ['-std=c++20']
    # env.Append(CCFLAGS=[ '-I/usr/include' ])
    # env.Append(CXXLAGS=[ '-I/usr/include' ])
    if env['DEBUG'] == False:
        env.Append(CCFLAGS=[
                '-Wall',
                '-Wfatal-errors',
                #'-O1',  O2 O3 break infector and a few others
                '-O2',
                '-fno-strict-aliasing',
                '-ffast-math',
                '-fomit-frame-pointer',
                '-funroll-loops',
                '-DNDEBUG',
        ])
        env.Append(CCFLAGS=ARGUMENTS.get('CCFLAGS'))
    else:
        env.Append(CCFLAGS=[
            '-g',
            '-DDEBUG',
            '-D_DEBUG',
        ])
    if env['SSE2'] == True:
        if not x86_64:
            env.Append(CCFLAGS=[
                '-march=i686',
            ])
        env.Append(CCFLAGS=[
            '-mfpmath=sse',
            '-msse2',
        ])
    elif env['SSE'] == True:
        if not x86_64:
            env.Append(CCFLAGS=[
                '-march=i686',
            ])
        env.Append(CCFLAGS=[
                '-mfpmath=sse',
                '-msse',
        ])



######################################
# 64-bit fixes
######################################
LINKFLAGS=[ '-L/usr/local/lib' ]
import platform

if x86_64:
    picLibBuilder = Builder(
        action = Action('$ARCOM'),
        emitter = '$LIBEMITTER',
        prefix = '$LIBPREFIX',
        suffix = '$LIBSUFFIX',
        src_suffix = '$OBJSUFFIX',
        src_builder = 'SharedObject'
    )
    env['BUILDERS']['StaticLibrary'] = picLibBuilder
    env['BUILDERS']['Library'] = picLibBuilder
    env.Append(CCFLAGS=[
        '-D__X86_64__'
    ])




######################################
#
# signature
#
######################################

import socket


env['LIBZZUB_VERSION'] = VERSION
env['SIGNATURE'] = 'libzzub %s r%s %s-%s %s' % (env['LIBZZUB_VERSION'],env['REVISION'],env['CC'],sys.platform,socket.gethostname())



######################################
#
# define install paths and helpers
#
######################################

try:
    umask = os.umask(0o22)
    #print 'setting umask to 022 (was 0%o)' % umask
except OSError:         # ignore on systems that don't support umask
    pass

import SCons
from SCons.Script.SConscript import SConsEnvironment
SConsEnvironment.Chmod = SCons.Action.ActionFactory(os.chmod,
                lambda dest, mode: 'Chmod: "%s" with 0%o' % (dest, mode))
def ldconfig(dir):
    # execute only if installing into root
    if not str(env['DESTDIR']):
        os.system('ldconfig %s' % dir)
SConsEnvironment.LdConfig = SCons.Action.ActionFactory(ldconfig, lambda dir: 'LdConfig: "%s"' % dir)

def InstallPerm(env, dir, source, perm):
    obj = env.Install(dir, source)
    for i in obj:
        env.AddPostAction(i, env.Chmod(str(i), perm))
    return dir

SConsEnvironment.InstallPerm = InstallPerm




def install(target, source, perm=None, symlink=False):
    if not perm:
        return env.Install(dir=target, source=source)
    else:
        return env.InstallPerm(dir=target, source=source, perm=perm)

env.Alias(target='install', source=rootpath)
env.Alias(target='install', source=pyextpath)

def install_root(source):
    return install(rootpath, source)

def install_lib(source):
    result = install(libpath, source)
    if posix and (not env['DESTDIR']):
        env.AddPostAction(result, env.LdConfig(libpath))
    return result

def install_python_extension(name,files):
    return install(pyextpath + "/"+name, files)

def install_bin(source):
    return install(binpath, source)

def install_plugin(source):
    return install(pluginpath, source)

def install_plugin_help(name, files):
    return install("${DESTDIR}${PREFIX}/share/doc/zzub/plugins/"+name, files, 0o644)




######################################
#
# how to build submodules, the scons_module 
#
######################################



#######################
# faust build is messy
#######################


faust_backends = [ 
    'C_BACKEND', 'CODEBOX_BACKEND', 'CPP_BACKEND', 'CMAJOR_BACKEND', 'CMAJOR_BACKEND', 'CSHARP_BACKEND', 
    'DLANG_BACKEND', 'FIR_BACKEND', 'INTERP_BACKEND', 'JAVA_BACKEND', 'JAX_BACKEND', 'JULIA_BACKEND',
    'JSFX_BACKEND', 'OLDCPP_BACKEND', 'RUST_BACKEND', 'TEMPLATE_BACKEND', 'VHDL_BACKEND', 'WASM_BACKEND'
]


faust_main = '-C ../../build/backends/all.cmake'
faust_vars = """-DLLVM_BACKEND=STATIC -DINCLUDE_STATIC=On -DINCLUDE_DYNAMIC=off -DINCLUDE_EXECUTABLE=off -DSELF_CONTAINED_LIBRARY=on -DUSE_LLVM_CONFIG=On -DLLVM_CONFIG=%s""" % env['LLVM_CONFIG']
faust_backends = ' '.join(["-D{}=off".format(backend) for backend in faust_backends])
faust_options = faust_vars + ' ' + faust_main + ' ' + faust_backends


def install_faust(self, env):
    install_recursive(env['INSTALL_ROOT'] + "/lib/faustlibraries", os.path.join(env['SRC_PATH'], 'libneil/src/faustlibraries'), '*')





######################################

# site_scons/ext_modules.py contains the code for the ext_modules.helpers()
# 

submodules = [
    ext_modules.cpp_path('libneil', '${BUILD_PATH}/libneil/include'),

    ext_modules.scons_module('kiss_fft'),

    ext_modules.cmake_module('minizip',
                             'minizipd' if env['DEBUG'] else 'minizip'),

    ext_modules.cmake_module('gist', 
                             'Gist', 
                             src_subdir = 'src', 
                             cpp_defines = ['USE_KISS_FFT']),

    ext_modules.cmake_module('loguru', 
                             'logurud' if env['DEBUG'] else 'loguru', 
                             always_link = True),

    # faust build structure uses the same location for release and debug build
    # so manually delete the build when switching between debug and release
    ext_modules.cmake_module('faust', 
                             lib_name='faustwithllvm',
                             src_subdir='architecture', 
                             cmake_opts=faust_options,
                             cmake_env='LLVM_CONFIG=%s' % env['LLVM_CONFIG'],
                             lib_path='../lib',
                             cmakelists_dir='..',
                             install=install_faust),

    ext_modules.scons_module('lanternfish'),

    ext_modules.scons_module('libzzub', env_flags = {
        'LIB_BUILD_PATH': '${BUILD_PATH}/lib',
        'BIN_BUILD_PATH': '${BUILD_PATH}/bin',
    }),

    ext_modules.scons_module('plugins'),

    ext_modules.scons_module('pyzzub'),
]


env.AddSubmodules(submodules)




######################################################
#
# configuration helpers
#
######################################################

USE_SNDFILE = env['SNDFILE']


def try_finding_executable(name):
    for path in os.environ['PATH'].split(os.pathsep):
        fullpath = os.path.join(path,name)
        if os.path.isfile(fullpath):
            return fullpath

def check_has_executable(context, name):
    context.Message("Checking for %s in PATH... " % name)
    fullpath = try_finding_executable(name)

    if fullpath:
        context.Result(fullpath)
        return fullpath
    else:
        context.Result("missing")
        return None


def check_command_is_version(context, command, version):
    context.Message("Checking for version of '%s'... " % command)
    ver = os.popen(command).read().strip()

    if ver[:len(version)] == version:
        context.Result("yes")
        return True
    else:
        context.Result("no")
        return False


def check_command_at_least_version(context, command, version):
    context.Message("Checking '%s' is at least version %s..." % (command, version))
    retver = os.popen(command).read().strip()

    if LooseVersion(retver) >= LooseVersion(str(version)):
        context.Result("yes")
        return True
    else:
        context.Result("no")
        return False


def check_cpu_flag(context, flag):
    context.Message("Checking for '%s' CPU flag... " % flag)
    if linux:
        for line in open('/proc/cpuinfo','r'):
            if ':' in line:
                v = line.index(':')
                key,value = line[:v],line[v+1:]
                key = key.strip()
                value = value.strip()
                if key == 'flags':
                    if flag in value.split(' '):
                        context.Result("yes")
                        return True
        context.Result('no')
        return False
    # XXX: add cpu flag check for other platforms
    context.Result('ERROR: not supported for this platform.')
    return False


def check_pkg_config(context, version):
    context.Message( 'Checking for pkg-config... ' )
    ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
    context.Result( ret )
    return ret


def check_pkg(context, name):
    context.Message( 'Checking for %s... ' % name )
    ret = context.TryAction('pkg-config --exists \'%s\'' % name)[0]
    context.Result( ret )
    return ret


def check_pkg_version(context, name, version):
    context.Message("Checking to see if %s is at least version %s... " % (name, version))
    ret = context.TryAction("pkg-config --atleast-version='%s' '%s'" % (version, name))[0]
    context.Result(ret)
    return ret


def is_cleaning():
    import SCons.Script.Main
    try: return SCons.Script.Main.GetOption('clean')
    except: return SCons.Script.Main.options.clean



##############################################
# configuration
##############################################


if (not is_cleaning()) and ('configure' in COMMAND_LINE_TARGETS):
    import os

    env['CONFIGURED'] = ''
    yesno = {True:'yes', False:'no'}
    conf = Configure(env,
        custom_tests = {
            'HasExecutable' : check_has_executable,
            'CommandIsVersion' : check_command_is_version,
            'CommandAtLeastVersion' : check_command_at_least_version,
            'CheckCPUFlag' : check_cpu_flag,
            'CheckPKGConfig' : check_pkg_config,
            'CheckPKG' : check_pkg,
            'CheckPKGVersion' : check_pkg_version,
        }
    )



    # check if dev libs installed

    lib_errors = []

    if not conf.CheckCXXHeader('loguru.cpp'):
        lib_errors.append(SubModuleNotFound('loguru', 'https://github.com/emilk/loguru'))

    if not conf.CheckCHeader('zlib.h'):
        lib_errors.append(LibraryNotFound("zlib"))

    if not conf.CheckCHeader('bz2.h'):
        lib_errors.append(LibraryNotFound("bzip2"))

    if not conf.CheckCHeader('sndfile.h'):
        lib_errors.append(LibraryNotFound("libsndfile"))

    if not conf.CheckCHeader('samplerate.h'):
        lib_errors.append(LibraryNotFound("libsamplerate (libsrc)"))

    if not conf.CheckCHeader('fftw3.h'):
        lib_errors.append(LibraryNotFound("libfftw3"))

    if not conf.CheckCHeader('mad.h'):
        lib_errors.append(LibraryNotFound("libmad"))

    if not conf.CheckCHeader('mpg123.h'):
        lib_errors.append(LibraryNotFound("libmpg123"))

    if not conf.CheckCXXHeader('boost/graph/adjacency_list.hpp'):
        lib_errors.append(LibraryNotFound("libboost-graph"))
        
    if not conf.CheckCXXHeader('pugixml.hpp'):
        lib_errors.append(LibraryNotFound("libpugixml"))

    if not conf.CheckCHeader('FLAC/all.h'):
        lib_errors.append(LibraryNotFound("libflac"))
    
    if not conf.CheckCHeader('portaudio.h'):
        lib_errors.append(LibraryNotFound("portaudio"))
        
    if not conf.CheckCHeader('mad.h'):  # needed by libmad 
        env['MAD'] = False
    else:
        env['MAD'] = True


    if posix: # needed by vst3 headers 
        if not conf.CheckCHeader('X11/Xlib.h'):
            lib_errors.append(LibraryNotFound("Xlib.h"))

    if conf.CheckCHeader('ladspa.h'):
        env['LADSPA'] = True

    if conf.CheckCHeader('dssi.h') and conf.CheckCHeader('lo/lo.h'):
        env['DSSI'] = True
    else:
        env['DSSI'] = False


    # need  about uninstalled lv2 packages 
    missing_lv2 = []
    for pkg, header in (('lilv-0', 'lilv-0/lilv/lilv.h'), ('lv2', 'lv2.h'), ('suil-0', 'suil-0/suil/suil.h')):
        if not conf.CheckCHeader(header):
            print("MISSING", header, pkg)    
            missing_lv2.append(pkg)
    
    if missing_lv2:
        lib_errors.append("To build LV2 plugins, install: " + " ".join(missing_lv2))
    else:
        env['LV2'] = True

    if conf.CheckCPUFlag('sse'):
        env['SSE'] = True

    if conf.CheckCPUFlag('sse2'):
        env['SSE'] = False
        env['SSE2'] = True

    if conf.CheckPKG('gtk+-3.0'):
        env['GTK3'] = True
    else:
        env['GTK3'] = False


    # faust depends on llvm-config > version 18 with static libraries
    # most llvm packages on linux only have dynamic libraries
    # options: compile llvm and or install llvm with static libraries (rocm-llvm is on most linux distros)

    def try_llvm_config(llvm_config_path, errors):
        if not os.path.isfile(llvm_config_path):
            errors.append(LlvmConfigError('llvm-config not found at %s' % llvm_config_path))
            return False
        
        #check version 18
        if not conf.CommandAtLeastVersion(llvm_config_path + ' --version', 18):
            errors.append(LlvmConfigError('llvm-config version is too low, needs to be at least 18'))
            return False
        
        #check static libraries are available
        if os.system(llvm_config_path + ' --link-static --libfiles > /dev/null') != 0:
            errors.append(LlvmConfigError('static llvm libraries not found (ie libLLVMBinaryFormat.a)'))
            return False

        print("Checking llvm-config ", llvm_config_path, '.. ok')
        return True 

    llvm_errors = []
    if not try_llvm_config(env['LLVM_CONFIG'], llvm_errors):
        print("llvm-config failed, try rocm llvm config")
        if try_llvm_config('/opt/rocm/llvm/bin/llvm-config', []):
            env['LLVM_CONFIG'] = '/opt/rocm/llvm/bin/llvm-config'
        else:
            lib_errors.extend(llvm_errors)

    if not conf.CheckPKGConfig('0.15.0'):
        lib_errors.append(PkgVersionErr("pkg-config", "0.15.0"))

    if not conf.CheckPKGVersion('portaudio-2.0', '19'):
        lib_errors.append(PkgVersionErr("portaudio-2.0", "19"))

    if not conf.HasExecutable('xmlto'):
        lib_errors.append(ExecNotFound("xmlto"))

    if lib_errors:
        print("\nBuild failed...\n")
        print("\n".join((str(err) for err in lib_errors)))
        sys.exit(1)

    print("Finished configuration.")
    print()
    print("=== Using ===".center(50))
    print("GTK3:".rjust(30), yesno[env['GTK3'] == True])
    print("MAD:".rjust(30), yesno[env['MAD'] == True])  
    print("Use SSE CPU extension:".rjust(30),yesno[env['SSE'] == True])
    print("Use SSE2 CPU extension:".rjust(30),yesno[env['SSE2'] == True])
    print()
    print("=== Components ===".center(50))
    print("DSSI:".rjust(30),yesno[env['DSSI'] == True])
    print("LADSPA:".rjust(30),yesno[env['LADSPA'] == True])
    print("LV2:".rjust(30),yesno[env['LV2'] == True])
    print("pyzzub (zubb for Python):".rjust(30),yesno[env['PYZZUB'] == True])
    print()
    print("=== Directories ===".center(50))
    print("Prefix:".rjust(30),env['PREFIX'])
    print("Install into:".rjust(30),env.Dir("${DESTDIR}${PREFIX}"))
    print("Library directory:".rjust(30),env.Dir("${PREFIX}${LIBDIR}"))

    print()
    print("Generate debug info:".rjust(30),env['DEBUG'])

    env = conf.Finish()
    env['CONFIGURED'] = VERSION
    opts.Save(options_conf_file, env)
    print()
    print("Please check if above settings reflect what you want, then build libzzub using")
    print("\tscons")
    sys.exit(0)

######################################
# save config
######################################
    
env.Precious(options_conf_file)
opts.Save(options_conf_file, env)
Help( opts.GenerateHelpText( env ) )

if (not is_cleaning()) and (env['CONFIGURED'] != VERSION):
    print("libzzub is not configured for version ''%s', the configured version in '%s' is '%s'." % (VERSION, options_conf_file, env['CONFIGURED']))
    print()
    print("Please run 'scons configure' to configure libzzub.")
    sys.exit(1)




#############################
# added to builders
#############################


def build_signature(target, source, env):
    outfilepath = str(target[0])
    optionsconfpath = str(source[0])

    opts = {}
    exec (open(optionsconfpath,"r").read(), {}, opts)

    ofile = open(outfilepath,"w")
    print("// generated by scons, do not touch", file=ofile)
    print("const char ZZUB_SIGNATURE[] = \"%s\";" % opts['SIGNATURE'], file=ofile)
    ofile.close()



#########################################################
#
# custom builders
#
# mostly using:
#     /libneil/tools/zidl 
#
# to generate zzub's c headers and python swig bindings  
# as defined in:
#     libneil/include/zzub/zzub.zidl
#
#########################################################

builders = dict(
    Signature = Builder(action = build_signature),
    ZIDLCHeader = Builder(action = 'python ${SRC_PATH}/libneil/tools/zidl --c-header $TARGET $SOURCE'),
    ZIDLApiHeader = Builder(action = 'python ${SRC_PATH}/libneil/tools/zidl --api-header $TARGET $SOURCE'),
    ZIDLDataHeader = Builder(action = 'python ${SRC_PATH}/libneil/tools/zidl --data-header $TARGET $SOURCE'),

    ZIDLCDef = Builder(action =     'python ${SRC_PATH}/libneil/tools/zidl --c-def $TARGET $SOURCE'),
    ZIDLPyCtypes = Builder(action = 'python ${SRC_PATH}/libneil/tools/zidl --libversion $LIBZZUB_VERSION --py-ctypes $TARGET $SOURCE'),
)

env['BUILDERS'].update(builders)

#######################################
#
# generate zidl headers
#
#######################################

output = []
output.append(env.ZIDLCHeader(   '${BUILD_PATH}/libneil/include/zzub/zzub.h',         '${SRC_PATH}/libneil/include/zzub/zzub.zidl'))
output.append(env.ZIDLApiHeader( '${BUILD_PATH}/libneil/include/zzub/zzub_api.h',     '${SRC_PATH}/libneil/include/zzub/zzub.zidl'))
output.append(env.ZIDLDataHeader('${BUILD_PATH}/libneil/include/zzub/zzub_data.h',    '${SRC_PATH}/libneil/include/zzub/zzub.zidl'))
output.append(env.ZIDLCDef(      '${BUILD_PATH}/libneil/pyzzub/libzzub.def',          '${SRC_PATH}/libneil/include/zzub/zzub.zidl'))
output.append(env.ZIDLPyCtypes(  '${BUILD_PATH}/libneil/src/pyzzub/zzub/__init__.py', '${SRC_PATH}/libneil/include/zzub/zzub.zidl'))

# make targets dependent on script
env.Depends(output, '${SRC_PATH}/libneil/tools/zidl')

# clone zidl header files - generated immediately above - to the source dir for IDE code completion   
for obj in output[0:3]:
    header_name = str(obj[0])
    src = env['BUILD_PATH'] + '/libneil/' + header_name
    dest = env['SRC_PATH'] + '/libneil/' + header_name
    env.AddPostAction(obj, Copy(dest, src))



# Copy zzub.__init__.py to parent of BUILD_PATH 
# the BUILD_PATH is "project_path/build/Dedug" or "project_path/build/Release"))
# so we can include add "project_path/build" to extraPaths so "import zzub" works

env.AddPostAction(output[4], Copy('${BUILD_PATH}/../zzub.py', '${BUILD_PATH}/libneil/src/pyzzub/zzub/__init__.py'))

#######################################
#
# SConscripts
#
#######################################

Export(
    'install_lib',
    'install_plugin',
    'install_bin',
    'install',
    'install_root',
    'install_plugin_help',
    'install_python_extension',
    'gcc',
    'posix',
    'env',
)

# generate signature
env.Signature(target='include/zzub/signature.h', source=options_conf_file)
env.Signature(target='${SRC_PATH}/libneil/include/zzub/signature.h', source=options_conf_file)

env.ParseConfig("${LLVM_CONFIG} --system-libs")

##############################################################################
#
# build projects in subdir of libnei
#
##############################################################################

env.BuildSubmodules()

#######################################
#
# install headers
#
#######################################


import glob
for header in glob.glob(env['BUILD_PATH'] + '/libneil/include/zzub/*.h'):
    install(includepath+'/zzub', header)


install_recursive(rootpath + "/lib/faustlibraries", os.path.join(env['SRC_PATH'], 'libneil/src/faustlibraries'), '*')
